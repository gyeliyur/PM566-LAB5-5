---
title: "Lab-5"
author: "Gowri"
format: 
  html:
    embed-resources: true
editor: visual
---

## Set up

```{r}
#processing met 
met <- met[met$temp > -17 | is.na(met$temp), ]
met$elev[met$elev == 9999.0] <- NA
met$week <- as.numeric(format(as.Date(paste(met$year, met$month, met$day, sep = "-")), "%U"))
met <- met[met$week == min(met$week, na.rm=TRUE)]
met_avg <- aggregate(cbind(temp, rh,wind.sp, vis.dist, dew.point,lat, lon, elev, atm.press)
~USAFID, data = met, FUN = mean, na.rm =TRUE)
met_avg$region <- ifelse(met_avg$lon > -98 & met_avg$lat >39.71, "northeast",
                         ifelse(met_avg$lon > -98 & 
                                  met_avg$lat < 39.71,"south east",
                                ifelse(met_avg$lon < -98 & met_avg$lat >39.71,
                                       "north west", "south west")))
met_avg$elev_cat <- ifelse(met_avg$elev>252,"high", "low")


#processing stations 
# Download the data
stations <- read.csv("https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv")
stations$USAF <- as.integer(stations$USAF)

# Dealing with blanks and 999999
stations$USAF[stations$USAF == 999999] <- NA
stations$CTRY[stations$CTRY == ""] <- NA
stations$STATE[stations$STATE == ""] <- NA

# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, c('USAF', 'CTRY', 'STATE')])

# Dropping NAs
stations <- stations[!is.na(stations$USAF), ]

# Removing duplicates
stations <- stations[!duplicated(stations$USAF), ]







```

## **Question 1: Representative station for the US**

```{r}
temp_median <- quantile(met_avg$temp, 0.5,na.rm = TRUE)
wind_median <- quantile(met_avg$wind.sp, 0.5,na.rm = TRUE)
atm_median <- quantile(met_avg$atm.press, 0.5,na.rm = TRUE)
temp_station <- met_avg$USAFID[which.min(abs(met_avg$temp-temp_median))]
wind_station <- met_avg$USAFID[which.min(abs(met_avg$wind.sp-wind_median))]
atm_station <- met_avg$USAFID[which.min(abs(met_avg$atm.press-atm_median))]
c(temp_station, wind_station, atm_station)

```

## **Question 2: Representative station per state**

```{r}
met_stations <- merge(met_avg, stations, by.x = "USAFID", by.y = "USAF")
state_medians <- aggregate(cbind(lat,lon) ~ STATE, data = met_stations, FUN = median, na.rm = TRUE)
state_medians

```

## **Question 3: In the middle?**

```{r}
state_means <- aggregate(cbind(lat,lon) ~ STATE, data = met_stations, FUN = mean, na.rm = TRUE)
closest_stations <- merge(met_stations, state_means, by = "STATE", suffixes = c("", "_mean"))
closest_stations$distance <- sqrt((closest_stations$lat - 
closest_stations$lat_mean)^2 + (closest_stations$lon - closest_stations$lon - closest_stations$lon_mean)^2)
closest_by_state <- do.call(rbind, lapply(split(closest_stations, 
closest_stations$STATE), function(x) x[which.min(x$distance),]))

library(leaflet)
leaflet() %>%
  addTiles()%>%
  addCircleMarkers(data = state_medians, ~lon, ~lat, color = 'blue', group = "Median Stations ", popup = ~STATE) %>%
  addCircleMarkers(data = closest_by_state, ~lon, ~lat, color = 'red', group = "Closest to Mean ", popup = ~STATE) %>%
  addLayersControl(overlayGroups = c("Median Staitions", "Closest to Mean"))
        
                        

```

## **Question 4: Means of means**

```{r}

# step1 : claculate state average temperatures (from station averages )
state_temps <- aggregate(temp ~ STATE, data = met_stations, FUN = mean, na.rm = TRUE)

#step 2 : classify states by temperature 
state_temps$temp_cat <- ifelse(state_temps$temp < 20, "low",
                               ifelse(state_temps$temp < 25,
                                      "mid", "high"))

#step 3: merge original data with state temperature categories
met_with_temp_cat <- merge(met, stations, by.x = "USAFID", by.y = 
                             "USAF")
```
